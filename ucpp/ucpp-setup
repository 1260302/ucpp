#! /bin/bash

case `uname` in 
	Linux*)
		platform=linux-gccdist
		C_DRIVE=$HOME/.ucpp/gccdist/
		;;
	windows32|MINGW*)
		platform=windows-git
		C_DRIVE=/c/
		;;
	CYGWIN*)
		platform=windows-cygwin
		C_DRIVE=/cygdrive/c/
		;;
esac

usage()
{
	if [ "x$platform" = "x" ]
	then
		cat<<EOF
Usage: ucpp setup PLATFORM [options]
  Installs Universal C++ command-line tools.

EOF
	else
		cat<<EOF
Usage: ucpp setup [PLATFORM] [-t <team-number>]
  Installs Universal C++ command-line tools.
  The default platform is: $platform

EOF
	fi
	cat <<EOF
Options
  -h, --help, help
      Display this help and exit
  -t <team-number>
      Set default team number for deploying code
  -c <path-to-c-drive>
      For the linux-windriver platform ONLY:
        Set the path equivalent to the C:/ drive
        (the parent directory of the WindRiver folder)
        NOTE: requires trailing slash (/)
      
Available Platforms:
  linux-gccdist
      Set up Linux system that automatically downloads
      the compiler and the latest version of WPILib
      Re-run this command to download WPILib updates

  linux-windriver
      Set up Linux system that relies on an existing
      WindRiver or gccdist install

  windows-cygwin
      Set up a Windows build system that uses Cygwin

  windows-git
      Set up a Windows build system that relies on
      WindRiver and MSYSgit
EOF
}

if [ "x$1" = "xlinux-windriver" ]
then
	platform=linux-windriver
	C_DRIVE=
	shift
fi

if [ "x$1" = "xlinux-gccdist" ]
then
	platform=linux-gccdist
	C_DRIVE=$HOME/.ucpp/gccdist/
	shift
fi

if [ "x$1" = "xwindows-cygwin" ]
then
	platform=windows-cygwin
	C_DRIVE=/cygdrive/c/
fi

if [ "x$1" = "xwindows-git" ]
then
	platform=windows-git
	C_DRIVE=/c/
	shift
fi

if [ "x$1" = "xhelp" ] || [ "x$1" = "x--help" ] || [ "x$platform" = "x" ]
then
	usage
	exit
fi

while getopts "ht:c:" opt; do
	case $opt in
		h)
			usage
			exit
			;;
		t)
			DEPLOY_IP=$(python <<EOF 2>&1 | grep "10." 
n=int("$OPTARG")
print "10.%i.%i.2\n" % (n//100, n%100)
EOF
			)
			if [ "x$DEPLOY_IP" = "x" ]
			then
				echo "Invalid team number"
				exit 1
			fi
			;;
		c)
			C_DRIVE=$OPTARG
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			usage >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			usage >&2
			exit 1
			;;
	esac
done


gen_settings()
{
	if [ -f "$HOME/.ucpp/settings" ]
	then
		echo -n "UCPP user settings already exist. Overwrite? (y/N)"
		if [ "x$UCPP_SILENT" = "xyes" ]
		then
			exit
		else
			read answer
			if [ "x$answer" = "xY" ] || [ "x$answer" = "xy" ]
			then
				:
			else
				exit
			fi
		fi
	fi

	mkdir -p "$HOME/.ucpp"

	cat >"$HOME/.ucpp/settings" <<EOF
#! /bin/bash
#  Also read by GNU make - use only variable defs here

##### Global ucpp settings #####

# Robot IP to deploy code to
export DEPLOY_IP=$DEPLOY_IP

# The location of the C:/ drive
#  Under dual-boot Linux/Windows systems, set to the location of the
#  C:/ drive under Linux (e.g. /media/sda2/)
#  In Cygwin, the C:/ drive is /cygdrive/c/
#  Under MSYS, the C:/ drive is /c/
#  If using gccdist, set C_DRIVE to the gccdist directory
#  Otherwise, just set to "C:/"
export C_DRIVE=$C_DRIVE
EOF

	cat >>"$HOME/.ucpp/settings" <<'EOF'

export WIND_HOME=${C_DRIVE}WindRiver
export WIND_BASE=$WIND_HOME/vxworks-6.3
export WIND_LIC_PROXY=$WIND_HOME/setup/x86-win32/bin/
export LM_LICENSE_FILE=$WIND_HOME/license/zwrsLicense.lic
export COMPILER_DIR=$WIND_HOME/gnu/3.4.4-vxworks-6.3/x86-win32/bin



# Default configure method for "ucpp configure"
#   Possible values: py, winpy, wr, help
# If left blank, a help message will be shown
EOF
}

install_gccdist()
{
	cd $HOME/.ucpp

	if [ -f gccdist.zip ]
	then
		echo "-----> gccdist download [DONE]"
	else
		echo "-----> gccdist download ..."
		wget ftp://ftp.ni.com/pub/devzone/tut/updated_vxworks63gccdist.zip -O gccdist.zip
		echo "-----> gccdist download [DONE]"
	fi

	if [ -d gccdist ]
	then
		echo "-----> gccdist install [DONE]"
	else
		echo "-----> gccdist install ..."
		unzip -oDDqq gccdist.zip -d .
		mkdir -p gccdist/WindRiver/license
		cp gccdist/supp/zwrsLicense.lic gccdist/WindRiver/license/zwrsLicense.lic
		echo "-----> gccdist install [DONE]"
	fi

	echo -n "-----> Checking for WPILib updates... "
	wget -q http://firstforge.wpi.edu/sf/frs/do/viewSummary/projects.wpilib/frs -O - | grep 'WPILib C++ update' | sed "s/.*<a href=\"\([^\"]*\)\">.*/http:\/\/firstforge.wpi.edu\1/" | uniq | sed "s/;.*//" > wpilib_page1.url
	wget `cat wpilib_page1.url` -q -O - | grep "rel[0-9][0-9]*" | grep href | sed "s/.*\(rel[0-9]*\)/\1/" | sort -r | head -n 1 | sed "s/.*<a href=\"\([^\"]*\).*/http:\/\/firstforge.wpi.edu\1/" | sed "s/;.*//" > wpilib_page2.url
	wget `cat wpilib_page2.url` -q -O - | grep "\.exe\s*<\/a>" | sed "s/.*<a href=\"\([^\"]*\)\".*/http:\/\/firstforge.wpi.edu\1/" | sed "s/;.*//" > wpilib_page3.url

	touch wpilib_last_downloaded.url
	if [ "x`cat wpilib_page3.url`" == "x`cat wpilib_last_downloaded.url`" ]
	then
		echo "no new updates"
	else
		echo "updates available"
		echo "-----> WPILib download ..."
		wget `cat wpilib_page3.url` -O wpilibupdate.exe
		mv wpilib_page3.url wpilib_last_downloaded.url
		echo "-----> WPILib download [DONE]"
	fi

	echo "-----> WPILib install ..."
	cd gccdist/WindRiver
	echo "A" | unzip ../../wpilibupdate.exe > unziplog.txt 2>/dev/null
	cd ../../
	rm -f wpilib_page1.url wpilib_page2.url wpilib_page3.url
	echo "-----> WPILib install [DONE]"

	echo "-----> [FINISHED]"
	echo -n "WPILib version: "
	cat gccdist/WindRiver/unziplog.txt | grep "inflating: WPILib/.*\.zip" | sed "s/.*\(WPILib\/.*\.zip\).*/\1/"

}

if [ "$platform" = "linux-windriver" ]
then
	if [ "x$C_DRIVE" = "x" ]
	then
		echo "Please specify path to C:/ drive"
		exit 1
	else
		gen_settings
		cat >>"$HOME/.ucpp/settings" <<EOF
DEFAULT_CONFIGURE_COMMAND=py
EOF
	fi
fi

if [ "$platform" = "linux-gccdist" ]
then
	gen_settings
	cat >>"$HOME/.ucpp/settings" <<EOF
DEFAULT_CONFIGURE_COMMAND=py
EOF

	install_gccdist
fi

if [ "$platform" = "windows-cygwin" ]
then
	gen_settings
	cat >>"$HOME/.ucpp/settings" <<'EOF'
DEFAULT_CONFIGURE_COMMAND=winpy
EOF
fi

if [ "$platform" = "windows-git" ]
then
	gen_settings
	cat >>"$HOME/.ucpp/settings" <<'EOF'
DEFAULT_CONFIGURE_COMMAND=winpy

PYTHON="${C_DRIVE}Python27"
# Use pre-existing python version, if there is one
if [ "x`which python`" = "x" ]
then
	if [ "x`which ${C_DRIVE}Python27/python.exe`" = "x" ]
	then
		echo "Python not found"
		echo "Install python or add it to system PATH"
		exit 1
	else
		PYTHON="${C_DRIVE}Python27"
	fi
else
	PYTHON=$(${C_DRIVE}WindRiver/workbench-3.0/x86-win32/bin/dirname "`which python`" | sed "s|[Cc]:/|$C_DRIVE|g") 
fi


# Use the WindRiver verion of all unix commands
export OLD_PATH="$PATH"
export PATH="${C_DRIVE}WindRiver/workbench-3.0/x86-win32/bin"
export PATH="$PATH:$PYTHON"
EOF

	if [ "x`which make`" = "x" ]
	then
		echo "Some unix commands are missing"
		echo -n "Add WindRiver commands to PATH via appending to .bashrc? (Y/n)"
		read answer
		a=yes
		if [ "x$answer" = "xN" ] || [ "x$answer" = "xn" ]
		then
			:
		else
			source $HOME/.ucpp/settings
			echo 'export PATH="$PATH:COMMANDS_DIR"' | \
			sed -e "s|COMMANDS_DIR|$WIND_HOME/workbench-3.0/x86-win32/bin|" >> ~/.bashrc
			echo ".bashrc updated; restart command prompt for changes to take effect"
		fi
	fi
fi
