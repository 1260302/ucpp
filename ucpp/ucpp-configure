#! /bin/bash

usage()
{
	cat <<EOF
Usage: ucpp configure <command>
Commands:
    py        Generate Linux makefile using python script
    winpy     Generate Windows makefile using python script
    wr        Modify WindRiver makefile to run on Linux
    wpipy     Generate WPILib Linux makefile using python script
    wpiwinpy  Generate WPILib Windows makefile using python script
    help      Show this message
EOF
}

command="help"

if [ "x$1" = "x" ]
then
	command="DEFAULT"
fi

if [ "x$1" = "xpy" ]
then
	command="py"
fi

if [ "x$1" = "xwinpy" ]
then
	command="winpy"
fi

if [ "x$1" = "xwr" ]
then
	command="wr"
fi

if [ "x$1" = "xwpipy" ]
then
	command="wpipy"
fi

if [ "x$1" = "xwpiwinpy" ]
then
	command="wpiwinpy"
fi

if [ "$command" = "help" ]
then
	usage
	exit
fi

##### Load Configuration #####

source ucpp_settings


# Anything other than "help" requires the current directory
# to be configured as a C++ project

case "x$HAVE_CPP_PROJECT" in
	xyes)
		;;
	xno)
		echo "Current directory is not configured as a C++ project"
		echo "Run ucpp init -t <team-number>"
		exit 66
		;;
	x)
		echo "ERROR: failed to load settings"
		exit 66
		;;
esac

if [ "$command" = "DEFAULT" ]
then
	if [ "x$DEFAULT_CONFIGURE_COMMAND" = "x" ]
	then
		usage
		exit
	else
		command=$DEFAULT_CONFIGURE_COMMAND
	fi
fi


##### Utility functions #####

function modify_makefile() {
	# Usage: modify_makefile <input >output
	# Modifies a WindRiver makefile so that it will run under Linux

	# Add environmental variables to Makefile
	#    WIND_HOME, WIND_BASE, WIND_LIC_PROXY, LM_LICENSE_FILE

	# Squash wine "fixme" errors
	#    export WINEDEBUG=fixme-all

	# Set the tool path (3 occurances)
	#    TOOL_PATH = wine $COMPILER_DIR
	# "wine" is part of the tool path because the tools are .exe files

	# Perform replacements:
	#    C:/   -> $C_DRIVE (e.g. /media/sda2/)
	#    ccppc -> ccppc.exe
	#    nmppc -> "$(TOOL_PATH)nmppc.exe"

	# Remove the line:
	#    -include $(DEP_FILES)
	# TODO: figure out what it does and why it gives errors

	sed 's|WIND_HOME :=|FILE_START\n&|' | \
	sed "s|FILE_START|export WIND_HOME=$WIND_HOME\n&|" |\
	sed "s|FILE_START|export WIND_BASE=$WIND_BASE\n&|" |\
	sed "s|FILE_START|export WIND_LIC_PROXY=$WIND_LIC_PROXY\n&|" |\
	sed "s|FILE_START|export LM_LICENSE_FILE=$LM_LICENSE_FILE\n&|" |\
	sed "s|FILE_START|export WINEDEBUG=fixme-all\n|" |\
	\
	sed "s|TOOL_PATH = |TOOL_PATH = wine $COMPILER_DIR/|g" |\
	\
	sed "s|C:/|$C_DRIVE|g" |\
	sed "s|ccppc|ccppc.exe|g" |\
	sed 's|nmppc|\$\(TOOL_PATH\)nmppc.exe|g' |\
	\
	sed 's|-include $(DEP_FILES)|##DEP_FILES not used on Linux##|g'

}

function modify_win_makefile()
{
	# Set environmental variables
	sed 's|WIND_HOME :=|FILE_START%NEWLINE%&|' |\
	sed "s|FILE_START|export WIND_HOME=$WIND_HOME%NEWLINE%&|" |\
	sed "s|FILE_START|export WIND_BASE=$WIND_BASE%NEWLINE%&|" |\
	sed "s|FILE_START|export WIND_LIC_PROXY=$WIND_LIC_PROXY%NEWLINE%&|" |\
	sed "s|FILE_START|export LM_LICENSE_FILE=$LM_LICENSE_FILE%NEWLINE%|" |\
	sed "s|%NEWLINE%|\\
|g" |\
	sed "s|TOOL_PATH = |TOOL_PATH = $COMPILER_DIR/|g" |\
	sed 's|nmppc|\$\(TOOL_PATH\)nmppc.exe|g' |\
	cat
}

function add_deploy_target()
{
	if [ "x$DEPLOY_IP" = "x" ]
	then
		:
	else
		cat <<EOF

# Custom targets inserted by ucpp

deploy: \$(PROJECT_TARGETS)
	wput -u $CPP_PROJECT_NAME/Debug/$CPP_PROJECT_NAME.out ftp://anonymous@$DEPLOY_IP/ni-rt/system/FRC_UserProgram.out

undeploy:
	ftp $DEPLOY_IP < $SCRIPT_INSTALL_DIR/delcode

EOF
	fi
}

function add_deploy_target_no_wput()
{
	if [ "x$DEPLOY_IP" = "x" ]
	then
		:
	else
        cat > PPC603gnu/deploy_code_script <<EOF 
cd /
cd ni-rt
cd system
put $CPP_PROJECT_NAME/Debug/$CPP_PROJECT_NAME.out FRC_UserProgram.out
EOF
		cat <<EOF

# Custom targets inserted by ucpp

deploy: \$(PROJECT_TARGETS)
	ftp $DEPLOY_IP < deploy_code_script

undeploy:
	ftp $DEPLOY_IP < $SCRIPT_INSTALL_DIR/delcode

EOF
	fi
}

##### Makefile generation commands #####

if [ "$command" = "py" ]
then
	echo -n "Manually generating Linux Makefile... "
	mkdir -p PPC603gnu
	python `dirname $0`/ucpp_gen_makefile.py | modify_makefile > PPC603gnu/Makefile_linux
	add_deploy_target >> PPC603gnu/Makefile_linux
	echo "Done"
fi

if [ "$command" = "winpy" ]
then
	echo -n "Manually generating Windows Makefile... "
	mkdir -p PPC603gnu
	python "`dirname "$0" | sed "s|$C_DRIVE|C:/|"`/ucpp_gen_makefile.py" | modify_win_makefile > PPC603gnu/Makefile
	add_deploy_target_no_wput >> PPC603gnu/Makefile
	echo "Done"
fi

if [ "$command" = "wr" ]
then
	if [ -f PPC603gnu/Makefile ]
	then
		echo -n "Modifying WindRiver Makefile for Linux..."
		modify_makefile <PPC603gnu/Makefile >PPC603gnu/Makefile_linux
		add_deploy_target >> PPC603gnu/Makefile_linux
		echo "Done"
	else
		echo "WindRiver Makefile not found"
		echo "Generate the Makefile or use other configuration methods"
		exit 66
	fi
fi

if [ "$command" = "wpipy" ]
then
	echo -n "Manually generating WPILib Linux Makefile... "
	mkdir -p PPC603gnu
	python `dirname "$0"`/ucpp_gen_wpilib_makefile.py | modify_makefile > PPC603gnu/Makefile_linux
	echo "Done"
fi

if [ "$command" = "wpiwinpy" ]
then
	echo -n "Manually generating WPILib Windows Makefile... "
	mkdir -p PPC603gnu
	python `dirname "$0"`/ucpp_gen_wpilib_makefile.py > PPC603gnu/Makefile
	echo "Done"
fi
